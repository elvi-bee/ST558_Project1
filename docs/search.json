[
  {
    "objectID": "ST558_Project1.html",
    "href": "ST558_Project1.html",
    "title": "ST 558 Project 1",
    "section": "",
    "text": "Add text"
  },
  {
    "objectID": "ST558_Project1.html#objectives",
    "href": "ST558_Project1.html#objectives",
    "title": "ST 558 Project 1",
    "section": "",
    "text": "Add text"
  },
  {
    "objectID": "ST558_Project1.html#data",
    "href": "ST558_Project1.html#data",
    "title": "ST 558 Project 1",
    "section": "Data",
    "text": "Data\nAdd text"
  },
  {
    "objectID": "ST558_Project1.html#api-call",
    "href": "ST558_Project1.html#api-call",
    "title": "ST 558 Project 1",
    "section": "API Call",

    "text": "API Call\nSteps: - build URL - use httr:GET() to contact website - parse the JSON data using the fromJSON function from the jsonlite package. This reads JSON data from file path or character string and converts and simplifies to R object. - add data to a tibble\n\n# load libraries\nlibrary(jsonlite)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter()  masks stats::filter()\n✖ purrr::flatten() masks jsonlite::flatten()\n✖ dplyr::lag()     masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(dplyr)\n\n\n#first attempt at API call - I added \"https://\" to the api url\nURL_ids &lt;- \"https://api.census.gov/data/2023/acs/acs5/pums?get=SEX,PWGTP,MAR&for=state:1&SCHL=24\"\nid_info &lt;- httr::GET(URL_ids)\n#str(id_info)\n\n\nparsed &lt;-fromJSON(rawToChar(id_info$content))\nPUMS20235Y &lt;- as_tibble(parsed[-1, ], .name_repair = ~ parsed[1, ])\nPUMS20235Y\n\n# A tibble: 2,248 × 5\n   SEX   PWGTP MAR   SCHL  state\n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 2     4     3     24    01   \n 2 1     20    1     24    01   \n 3 2     4     1     24    01   \n 4 1     27    1     24    01   \n 5 1     26    1     24    01   \n 6 1     14    1     24    01   \n 7 1     3     5     24    01   \n 8 1     11    1     24    01   \n 9 1     73    1     24    01   \n10 2     9     1     24    01   \n# ℹ 2,238 more rows"

  },
  {
    "objectID": "ST558_Project1.html#functions",
    "href": "ST558_Project1.html#functions",
    "title": "ST 558 Project 1",
    "section": "Functions",

    "text": "Functions\n\nHelper function to take what is returned by GET() and turn it into a tibble\n\n# I added \"https://\" to the URL again\n  URL_ids &lt;- \"https://api.census.gov/data/2023/acs/acs5/pums?get=SEX,PWGTP,MAR&for=state:1&SCHL=24\"\n  id_info &lt;- httr::GET(URL_ids)\n\ncreate_tibble_helper &lt;- function(id_info) {\n  parsed &lt;-fromJSON(rawToChar(id_info$content))\n  return(as_tibble(parsed[-1, ], .name_repair = ~ parsed[1, ]))\n  \n}\n\ncreate_tibble_helper(id_info)\n\n# A tibble: 2,248 × 5\n   SEX   PWGTP MAR   SCHL  state\n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 2     4     3     24    01   \n 2 1     20    1     24    01   \n 3 2     4     1     24    01   \n 4 1     27    1     24    01   \n 5 1     26    1     24    01   \n 6 1     14    1     24    01   \n 7 1     3     5     24    01   \n 8 1     11    1     24    01   \n 9 1     73    1     24    01   \n10 2     9     1     24    01   \n# ℹ 2,238 more rows\n\n\n\n\nAPI Date (choose year) function\nA function to query the API that allows the user to change the following items: – Year of survey (2022 as default). Only a single value here - Check that a valid value was given (number between 2010 and 2022)\n\n# function that builds API URL with user input for year\n  \nAPI_URL_builder &lt;- function(year = 2022){\n  #code that takes user inputs and concatenates them into a string that becomes the URL, year must be between 2010 - 2022 and cannot be a decimal\n  if ( year &lt; 2010 | year &gt; 2022 | year %% 1 != 0){\n     stop(\"Please enter a valid year between 2010 and 2022.\")\n     return(NA)\n   }\n  \n  API_URL &lt;- paste0(\"https://api.census.gov/data/\", year, \"/acs/acs1/pums?get=SEX,PWGTP,MAR&for=state:1\" )\n  return(API_URL)\n  \n}\n  \nAPI_URL_builder(2015)\n\n[1] \"https://api.census.gov/data/2015/acs/acs1/pums?get=SEX,PWGTP,MAR&for=state:1\"\n\n\n\n\nAPI Numeric Variables functionality\n\nBy default, return (1) AGEP (age) and PWGTP (weight).\nPWGTP must always be returned _ User options: AGEP, GASP, GRPIP, JWAP (time), JWDP (time), and JWMNP\nPWGTP: weight (Persons weight, continuous variable)\n\nAGEP: Age\nGASP: Gas cost (monthly cost, use ADJHSG to adjust GASP to constant dollars)\nGRPIP: Gross rent as a percentage of household income past 12 months (percent)\nJWAP (time): Time of arrival at work - hour and minute (coded 1-285 representing 4 minute increments)\nJWDP (time): Time of departure for work - hour and minute (coded 1-150, representing 9 minute increments)\nJWMP: Travel time to work (minutes, 1-200)\nThe function should turn variables into numeric values or time values (use the middle of the time period) where appropriate. Some variables are coded, e.g. time variables come in as codes as 4 and 9 minute increments. These will require processing at some point\nOne numeric variable other than PWGTP must be returned DOES AGEP COUNT HERE? see note in code below\n\n\n# function that builds API URL with user input for year and numeric variables\n\n\nAPI_Year_NumericVar_Builder &lt;- function(year = 2022,...){\n      if ( year &lt; 2010 | year &gt; 2022 | year %% 1 != 0){\n     stop(\"Please enter a valid year between 2010 and 2022.\")\n     #return(NA)\n   }\n      numvars &lt;- c(...)\n      numvar_options &lt;- c(\"AGEP\",\"GASP\",\"GRPIP\",\"JWAP\",\"JWDP\",\"JWMNP\")\n      \n      #define numvars as \"AGEP\" by default if no numerical variable was entered)\n  if (length(numvars) == 0) numvars &lt;- \"AGEP\"\n      \n      #make sure all user choices are in allowed list of options\n      if (!all(numvars %in% numvar_options)) \n        stop(\"Please enter a valid numeric variable.\")\n  \n      #Note to self: I'm not sure if this is needed because AGEP is default. does AGEP suffice as the required numeric variable?\n      if (length(numvars) &lt; 1) \n        stop(\"Include at least one numeric variable besides PWGTP.\")\n\n      numvars_comb &lt;- paste(numvars, collapse = \",\")\n      \n      \n  #numvars = c(\"AGEP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\")\n  API_URL &lt;- paste0(\"https://api.census.gov/data/\", year, \"/acs/acs1/pums?get=PWGTP,\",numvars_comb,\"&for=state:1\" )\n\n  return(API_URL)\n  \n}\n# I can only get the call below to work when I enter the variables as a combined vector.\nAPI_Year_NumericVar_Builder(2015, \"AGEP\",\"GASP\",\"GRPIP\")\n\n[1] \"https://api.census.gov/data/2015/acs/acs1/pums?get=PWGTP,AGEP,GASP,GRPIP&for=state:1\"\n\n#API_Year_NumericVar_Builder(2016)\n\n\n\nAPI Categorical Variables\nSpecify the categorical variables to be returned (SEX as default). ∗ Options for the user should be FER, HHL, HISPEED, JWTRNS, SCH, SCHL, and SEX - FER: gave birth to child in last 12 months - HHL: household language - HISPEED: Broadband internet service - JWTRNS: Means of transportation to work - SCH: School enrollment - SCHL: Educational attainment - SEX: Sex; 1- Male, 2-Female Your function should turn variables into factors with appropriate levels, where appropriate ∗ One categorical variable must be returned – (Check that the variables asked for are in this set of variables)\n\n# function that builds API URL with user input for numeric variables\n\n\nAPI_Year_NumericVar_Builder &lt;- function(year = 2022, numvars = \"AGEP\", catvars = \"SEX\"){\n      if ( year &lt; 2010 | year &gt; 2022 | year %% 1 != 0){\n     stop(\"Please enter a valid year between 2010 and 2022.\")\n     #return(NA)\n      }\n  \n      # add numeric and categorical variable user options\n      var_options &lt;- c(\"AGEP\",\"GASP\",\"GRPIP\",\"JWAP\",\"JWDP\",\"JWMNP\",\"SEX\", \"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \"SCH\", \"SCHL\")\n      \n      #make sure all user choices are in allowed list of options\n      if (!all(numvars %in% var_options)) \n        stop(\"Please enter a valid numeric variable.\")\n  \n      #Note to self: I'm not sure if this is needed because AGEP is default. does AGEP suffice as the required numeric variable?\n      if (length(numvars) &lt; 1) \n        stop(\"Include at least one numeric variable besides PWGTP.\")\n\n      numvars_comb &lt;- paste(numvars, collapse = \",\")\n      \n      # add categorical variable user options\n      \n      #make sure all user choices are in allowed list of options\n      if (!all(catvars %in% var_options)) \n        stop(\"Please enter a valid categorical variable.\")\n      catvars_comb &lt;- paste(catvars, collapse = \",\")\n      \n  #numvars = c(\"AGEP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\")\n  API_URL &lt;- paste0(\"https://api.census.gov/data/\", year, \"/acs/acs1/pums?get=PWGTP,\",numvars_comb,\",\",catvars_comb,\"&for=state:1\" )\n\n  return(API_URL)\n  \n}\n# I can only get the call below to work when I enter the variables as a combined vector.\n#API_Year_NumericVar_Builder(2015, numvars = c(\"AGEP\",\"GASP\",\"GRPIP\",\"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\"))\n\nAPI_Year_NumericVar_Builder(2015, numvars = c(\"AGEP\",\"GASP\",\"GRPIP\"), catvars = c(\"FER\", \"HHL\"))\n\n[1] \"https://api.census.gov/data/2015/acs/acs1/pums?get=PWGTP,AGEP,GASP,GRPIP,FER,HHL&for=state:1\"\n\n#API_Year_NumericVar_Builder(2016)\n\n\n\nAPI Geography\n(Internal note: this includes all code from chunks above (minus the tibble builder). We can eventually delete the older chunks above, but for now they show my progression in building this function.)\nGeographic functionality for API_URL_Builder function. ∗ User specifies individual regions, division, or states, as well as all regions, divisions, or states. If user selection for region, division, or state subset is left blank, the default selection is all regions, all divisions, or state 08 (Colorado).\n\n# function that builds API URL with user input for numeric, categorical, and geographic variable options\n\n\nAPI_URL_Builder &lt;- function(year = 2022, numvars = \"AGEP\", catvars = \"SEX\", geo_level = \"state\",geo_subset = \"08\"){\n      if ( year &lt; 2010 | year &gt; 2022 | year %% 1 != 0){\n     stop(\"Please enter a valid year between 2010 and 2022.\")\n     #return(NA)\n      }\n  \n      # add numeric and categorical variable user options\n      var_options &lt;- c(\"AGEP\",\"GASP\",\"GRPIP\",\"JWAP\",\"JWDP\",\"JWMNP\",\"SEX\", \"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \"SCH\", \"SCHL\")\n      \n      #make sure all user choices are in allowed list of options\n      if (!all(numvars %in% var_options)) \n        stop(\"Please enter a valid numeric variable.\")\n  \n      #Note to self: I'm not sure if this is needed because AGEP is default. does AGEP suffice as the required numeric variable?\n      if (length(numvars) &lt; 1) \n        stop(\"Include at least one numeric variable besides PWGTP.\")\n\n      numvars_comb &lt;- paste(numvars, collapse = \",\")\n      \n      # add categorical variable user options\n      \n      #make sure all user choices are in allowed list of options\n      if (!all(catvars %in% var_options)) \n        stop(\"Please enter a valid categorical variable.\")\n      catvars_comb &lt;- paste(catvars, collapse = \",\")\n      \n      \n      # add Geographic user options\n      \n      # allowable region, division, and state codes\n      region_code_options &lt;-c(\"1\",\"2\",\"3\",\"4\", \"*\")\n      division_code_options &lt;- c(\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\", \"*\")\n      state_code_options &lt;- c(\"01\",\"49\",\"21\",\"26\",\"29\",\"32\",\"34\",\"08\",\"51\",\"39\",\n                          \"02\",\"46\",\"04\",\"06\",\"55\",\"15\",\"22\",\"30\",\"47\",\"48\",\n                          \"09\",\"50\",\"53\",\"17\",\"20\",\"35\",\"36\",\"10\",\"11\",\"12\",\n                          \"56\",\"16\",\"25\",\"27\",\"42\",\"45\",\"13\",\"23\",\"24\",\"28\",\n                          \"37\",\"41\",\"05\",\"19\",\"31\",\"33\",\"44\",\"54\",\"18\",\"38\",\n                          \"40\", \"*\")\n                          #PR 72 not included\n      \n      #specify the geo_levels, with default of all\n      geo_level_options &lt;- c(\"all\", \"region\", \"division\", \"state\")\n      # Check that the value specified by the user is one of the above values\n      if (!all(geo_level %in% geo_level_options)) \n        stop(\"Please enter a valid Geography.\")\n      \n      # if geo_subset is missing, set defaults\nif (missing(geo_subset) | length(geo_subset) == 0 | geo_subset == \"\") {\n  if (geo_level == \"state\") geo_subset &lt;- \"08\"\n  if (geo_level == \"region\") geo_subset &lt;- \"*\"\n  if (geo_level == \"division\") geo_subset &lt;- \"*\"\n}\n\n      # note to self: consider using && instead of &\n      if (geo_level == \"region\" && !geo_subset %in% region_code_options) {\n  stop(\"Not a valid Region code. Region code must be 1–4\")\n      }\n      if (geo_level == \"division\" && !geo_subset %in% division_code_options) {\n  stop(\"Not a valid Division code. Division code must be 1–9\")\n      }\n      if (geo_level == \"state\" && !geo_subset %in% state_code_options) {\n  stop(\"Not a valid State code\")\n}\n     \n      # build URL\n  API_URL &lt;- paste0(\"https://api.census.gov/data/\", year, \"/acs/acs1/pums?get=PWGTP,\",numvars_comb,\",\",catvars_comb,\"&for=\",geo_level, \":\", geo_subset)\n  \n  return(API_URL)\n  \n  \n}\n\n\n# use function\nAPI_URL_Builder(2015, numvars = c(\"AGEP\",\"GASP\",\"GRPIP\"), catvars = c(\"FER\", \"HHL\"), geo_level = c(\"state\"), geo_subset = c(\"\"))\n\n[1] \"https://api.census.gov/data/2015/acs/acs1/pums?get=PWGTP,AGEP,GASP,GRPIP,FER,HHL&for=state:08\"\n\nAPI_URL_Builder(2015, numvars = c(\"AGEP\",\"GASP\",\"GRPIP\"), catvars = c(\"FER\", \"HHL\"), geo_level = c(\"state\"), geo_subset = c(\"55\"))\n\n[1] \"https://api.census.gov/data/2015/acs/acs1/pums?get=PWGTP,AGEP,GASP,GRPIP,FER,HHL&for=state:55\"\n\n\n\n\nMulti-Year API Builder\nThis function calls the single year function as many times as needed and combines the data into one final tibble (a year variable is included in this final tibble)\n\n#___________________________\n# start single year function\nAPI_URL_Builder &lt;- function(year = 2022, numvars = \"AGEP\", catvars = \"SEX\", geo_level = \"state\",geo_subset = \"08\"){\n      if ( year &lt; 2010 | year &gt; 2022 | year %% 1 != 0){\n     stop(\"Please enter a valid year between 2010 and 2022.\")\n     #return(NA)\n      }\n  \n      # add numeric and categorical variable user options\n      var_options &lt;- c(\"AGEP\",\"GASP\",\"GRPIP\",\"JWAP\",\"JWDP\",\"JWMNP\",\"SEX\", \"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \"SCH\", \"SCHL\")\n      \n      #make sure all user choices are in allowed list of options\n      if (!all(numvars %in% var_options)) \n        stop(\"Please enter a valid numeric variable.\")\n  \n      #Note to self: I'm not sure if this is needed because AGEP is default. does AGEP suffice as the required numeric variable?\n      if (length(numvars) &lt; 1) \n        stop(\"Include at least one numeric variable besides PWGTP.\")\n\n      numvars_comb &lt;- paste(numvars, collapse = \",\")\n      \n      # add categorical variable user options\n      \n      #make sure all user choices are in allowed list of options\n      if (!all(catvars %in% var_options)) \n        stop(\"Please enter a valid categorical variable.\")\n      catvars_comb &lt;- paste(catvars, collapse = \",\")\n      \n      \n      # add Geographic user options\n      \n      # allowable region, division, and state codes\n      region_code_options &lt;-c(\"1\",\"2\",\"3\",\"4\", \"*\")\n      division_code_options &lt;- c(\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\", \"*\")\n      state_code_options &lt;- c(\"01\",\"49\",\"21\",\"26\",\"29\",\"32\",\"34\",\"08\",\"51\",\"39\",\n                          \"02\",\"46\",\"04\",\"06\",\"55\",\"15\",\"22\",\"30\",\"47\",\"48\",\n                          \"09\",\"50\",\"53\",\"17\",\"20\",\"35\",\"36\",\"10\",\"11\",\"12\",\n                          \"56\",\"16\",\"25\",\"27\",\"42\",\"45\",\"13\",\"23\",\"24\",\"28\",\n                          \"37\",\"41\",\"05\",\"19\",\"31\",\"33\",\"44\",\"54\",\"18\",\"38\",\n                          \"40\", \"*\")\n                          #PR 72 not included\n      \n      #specify the geo_levels, with default of all\n      geo_level_options &lt;- c(\"all\", \"region\", \"division\", \"state\")\n      # Check that the value specified by the user is one of the above values\n      if (!all(geo_level %in% geo_level_options)) \n        stop(\"Please enter a valid Geography.\")\n      \n      # if geo_subset is missing, set defaults\nif (missing(geo_subset) | length(geo_subset) == 0 | geo_subset == \"\") {\n  if (geo_level == \"state\") geo_subset &lt;- \"08\"\n  if (geo_level == \"region\") geo_subset &lt;- \"*\"\n  if (geo_level == \"division\") geo_subset &lt;- \"*\"\n}\n\n      # note to self: consider using && instead of &\n      if (geo_level == \"region\" && !geo_subset %in% region_code_options) {\n  stop(\"Not a valid Region code. Region code must be 1–4\")\n      }\n      if (geo_level == \"division\" && !geo_subset %in% division_code_options) {\n  stop(\"Not a valid Division code. Division code must be 1–9\")\n      }\n      if (geo_level == \"state\" && !geo_subset %in% state_code_options) {\n  stop(\"Not a valid State code\")\n}\n     \n      # build URL\n  API_URL &lt;- paste0(\"https://api.census.gov/data/\", year, \"/acs/acs1/pums?get=PWGTP,\",numvars_comb,\",\",catvars_comb,\"&for=\",geo_level, \":\", geo_subset)\n  \n  return(API_URL)\n  \n  \n}\n#_____________________________________________\n# start multi-year function\nMultiYear_API_Builder &lt;- function(years, numvars = \"AGEP\", catvars = \"SEX\", geo_level = \"state\", geo_subset){\n    \n  # add the create tibble helper function\n    create_tibble_helper &lt;- function(id_info) {\n  parsed &lt;-fromJSON(rawToChar(id_info$content))\n  return(as_tibble(parsed[-1, ], .name_repair = ~ parsed[1, ]))\n    } \n \n  # create empty list to temporarily hold years results\n  result_list &lt;- list()\n  \n   # use a for loop for each year in years, run the API_URL_Builder\n  for (i in seq_along(years)) {\n      y &lt;- years[i]\n      \n    # use the loop to run/repeat the API URL Builder function   \n    url &lt;- API_URL_Builder(y, numvars, catvars, geo_level, geo_subset)\n    id_info &lt;- httr::GET(url)\n    df   &lt;- create_tibble_helper(id_info)\n    df$year &lt;- y\n    result_list[[i]] &lt;- df\n    \n    }\n  \n  final &lt;- dplyr::bind_rows(result_list)\n  return(final)\n  }\n\n\nout &lt;- MultiYear_API_Builder(\n  years    = c(2015, 2016),\n  numvars  = c(\"AGEP\",\"GASP\",\"GRPIP\"),\n  catvars  = c(\"FER\",\"HHL\"),\n  geo_level = \"region\",\n  geo_subset = \"2\"\n)\n#view(out)\n\nEM Data Wrangling - Metadata and Formatting step Can delete this soon - this is my intermediate hard-coded step in mapping the metadata to data\n\nlibrary(jsonlite)\n# try map metadata onto simple API URL call\n\n# an idea - we will incorporate this into the Builder Functions later\n# metadata_url &lt;- paste0(\"https://api.census.gov/data/\", year, \"/acs/acs1/pums/variables.json\")\n\nmetadata_url &lt;- \"https://api.census.gov/data/2022/acs/acs1/pums/variables.json\"\nmetadata_json &lt;- httr::GET(metadata_url)\nmetadata &lt;- fromJSON(rawToChar(metadata_json$content))\n\n# exploring json output\n#str(metadata)\n#metadata$variables$FER\n\n\n# creates a tibble for FER with a columns for Code (code) and a column for the values(label)\n# FER will have to be changed to be reflexive of user inputs\nFER_lookup &lt;- tibble(\n  code  = names(metadata$variables$FER$values$item),\n  label = unlist(metadata$variables$FER$values$item, use.names = FALSE) \n)\n#view(FER_lookup)\n\n# Make an API call for data\nPUMS_url &lt;- \"https://api.census.gov/data/2022/acs/acs1/pums?get=PWGTP,AGEP,GASP,GRPIP,FER,HHL&for=state:08\"\nPUMSjsonData &lt;- httr::GET(PUMS_url)\nPUMSData &lt;- fromJSON(rawToChar(PUMSjsonData$content))\nview(PUMSData)\n\n\n# process column headers for PUMSData from API call above\nheaders &lt;- PUMSData[1,] #PUMSData will become output from API Builder\nprint(headers)\n\n[1] \"PWGTP\" \"AGEP\"  \"GASP\"  \"GRPIP\" \"FER\"   \"HHL\"   \"state\"\n\nData &lt;- as.data.frame(PUMSData[-1, ], stringsAsFactors = FALSE)\nnames(Data) &lt;- headers\nhead(Data)\n\n  PWGTP AGEP GASP GRPIP FER HHL state\n1    70   18    3     0   2   0    08\n2    41   35    3     0   0   0    08\n3    35   40    3     0   0   0    08\n4    30   20    3     0   2   0    08\n5     4   14    3     0   0   0    08\n6    75   28    3     0   2   0    08\n\n# Join FER_lookup table to data from API call\n# this will have to change to join each look up table from each requested variable\nData &lt;- left_join(Data, FER_lookup, by = c(\"FER\" = \"code\")) %&gt;%\n  rename(FER_label = label)\n\n#view(Data)\n\n\n\nMetadata and Formatting\nAttempt 1 at combining Multi-Year API Builder with Metadata and Formatting step This processes categorical vars, still need to tackle numeric and time (JWAP and JWDP)\n\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(dplyr)\nlibrary(tibble)\n\n\n#METADATA\n# -------------------------------\n# helper function for PUMS metadata - builds variables.json URL from user inputs\nget_pums_metadata &lt;- function(year = 2022) {\n  metadata_url &lt;- paste0(\"https://api.census.gov/data/\", year, \"/acs/acs1/pums/variables.json\")\n  metadata_json_url &lt;- httr::GET(metadata_url)\n  fromJSON(rawToChar(metadata_json_url$content))\n}\n# test and check json data\n# metadata &lt;-get_pums_metadata(2018)\n# names(metadata)\n\n\n# -------------------------------\n# function to get variable ids for joining metadata to data\n# input is json metadata and the variable\nbuild_value_lookup &lt;- function(metadata, var) {\n  v &lt;- metadata$variables[[var]]\n  \n  # skip if not coded values for numeric vars like AGEP\n  if (is.null(v) || is.null(v$values) || is.null(v$values$item)) return(NULL)\n  \n  # make tibble with json metadata column names\n  lookup &lt;- tibble(\n    code  = names(v$values$item),\n    label = unlist(v$values$item, use.names = FALSE)\n  )\n  \n  # rename new columns - can we pull from JSON to name column?\n  names(lookup) &lt;- c(var, paste0(var, \"_label\"))\n  lookup\n}\n\n# -------------------------------\n# function to add labels to categorical variables in df\n\nlabel_categoricals &lt;- function(df, metadata, catvars) {\n  if (missing(catvars) || is.null(catvars) || length(catvars) == 0) return(df)\n\n  # only keep categorical vars that are actually in df\n  vars &lt;- intersect(catvars, names(df))\n  if (length(vars) == 0) return(df)\n\n  out &lt;- df\n\n  for (var in vars) {\n    # build lookup for this var\n    lk &lt;- build_value_lookup(metadata, var)  # &lt;- note: _simple\n    if (is.null(lk)) next\n\n    # ensure key types match\n    out[[var]] &lt;- as.character(out[[var]])\n    lk[[var]]  &lt;- as.character(lk[[var]])\n\n    # NEW debugging\n    #________________\n    #: pad time codes to 3 chars if needed\n  if (var %in% c(\"JWAP\",\"JWDP\")) {\n    out[[var]] &lt;- stringr::str_pad(out[[var]], 3, pad = \"0\")\n    lk[[var]]  &lt;- stringr::str_pad(lk[[var]], 3, pad = \"0\")\n  }\n    \n    #________________________\n    \n    # add VAR_label column\n    out &lt;- dplyr::left_join(out, lk, by = var)\n  }\n\n  out\n}\n\n#_______________________________\n#Parsing JWAP time data even after talking to dr post this isn't right. I emaield him again. \n#URL_JWAP &lt;- \"https://api.census.gov/data/2022/acs/acs1/pums/variables/JWAP.json\" \n#JWAP_key_raw &lt;- httr::GET(URL_JWAP) \n#JWAP_key_char &lt;- fromJSON(rawToChar(JWAP_key_raw$content)) #JWAP_key &lt;- dplyr::as_tibble(JWAP_key_char$values |&gt; #unlist()) #from prof #JWAP_key\n\n# -------------------------------\n# single-year API URL builder\n\nAPI_URL_Builder &lt;- function(year = 2022, numvars = \"AGEP\", catvars = \"SEX\",\n                            geo_level = \"state\", geo_subset = \"08\") {\n  if ( year &lt; 2010 | year &gt; 2022 | year %% 1 != 0){\n    stop(\"Please enter a valid year between 2010 and 2022.\")\n  }\n\n  # add numeric and categorical variable user options\n  var_options &lt;- c(\"AGEP\",\"GASP\",\"GRPIP\",\"JWAP\",\"JWDP\",\"JWMNP\",\"SEX\",\"FER\",\"HHL\",\n                   \"HISPEED\",\"JWTRNS\",\"SCH\",\"SCHL\")\n\n  # check numeric user options are valid\n  if (!all(numvars %in% var_options))\n    stop(\"Please enter a valid numeric variable.\")\n  if (length(numvars) &lt; 1)\n    stop(\"Include at least one numeric variable besides PWGTP.\")\n  if (!all(catvars %in% var_options))\n    stop(\"Please enter a valid categorical variable.\")\n\n  numvars_comb &lt;- paste(numvars, collapse = \",\")\n  catvars_comb &lt;- paste(catvars, collapse = \",\")\n\n  # allowable geography options\n  region_code_options   &lt;- c(\"1\",\"2\",\"3\",\"4\",\"*\")\n  division_code_options &lt;- c(\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"*\")\n  state_code_options    &lt;- c(\"01\",\"49\",\"21\",\"26\",\"29\",\"32\",\"34\",\"08\",\"51\",\"39\",\n                             \"02\",\"46\",\"04\",\"06\",\"55\",\"15\",\"22\",\"30\",\"47\",\"48\",\n                             \"09\",\"50\",\"53\",\"17\",\"20\",\"35\",\"36\",\"10\",\"11\",\"12\",\n                             \"56\",\"16\",\"25\",\"27\",\"42\",\"45\",\"13\",\"23\",\"24\",\"28\",\n                             \"37\",\"41\",\"05\",\"19\",\"31\",\"33\",\"44\",\"54\",\"18\",\"38\",\n                             \"40\",\"*\")\n\n  geo_level_options &lt;- c(\"all\", \"region\", \"division\", \"state\")\n  if (!all(geo_level %in% geo_level_options))\n    stop(\"Please enter a valid Geography.\")\n\n  if (missing(geo_subset) | length(geo_subset) == 0 | geo_subset == \"\") {\n    if (geo_level == \"state\") geo_subset &lt;- \"08\"\n    if (geo_level == \"region\") geo_subset &lt;- \"*\"\n    if (geo_level == \"division\") geo_subset &lt;- \"*\"\n  }\n\n  if (geo_level == \"region\"  & !geo_subset %in% region_code_options)\n    stop(\"Not a valid Region code. Region code must be 1–4\")\n  if (geo_level == \"division\" & !geo_subset %in% division_code_options)\n    stop(\"Not a valid Division code. Division code must be 1–9\")\n  if (geo_level == \"state\"   & !geo_subset %in% state_code_options)\n    stop(\"Not a valid State code\")\n\n  # Build URL\n  API_URL &lt;- paste0(\n    \"https://api.census.gov/data/\", year, \"/acs/acs1/pums?get=PWGTP,\",\n    numvars_comb, \",\", catvars_comb,\n    \"&for=\", geo_level, \":\", geo_subset\n  )\n\n  return(API_URL)\n}\n\n# -------------------------------\n# multi-year function\n\n#two lines below are experimental - working on time parsing\n\nnumvars &lt;- c(\"AGEP\",\"GASP\",\"GRPIP\",\"JWMNP\")\ncatvars &lt;- c(\"FER\",\"HHL\",\"HISPEED\",\"JWTRNS\",\"SCH\",\"SCHL\",\"SEX\",\"JWAP\",\"JWDP\")\n\n\nMultiYear_API_Builder &lt;- function(years, \n                                  numvars = \"AGEP\", \n                                  catvars = \"SEX\",\n                                  geo_level = \"state\", \n                                  geo_subset) {\n\n  # helper: parse GET -&gt; tibble with header row as names\n  create_tibble_helper &lt;- function(id_info) {\n    parsed &lt;- fromJSON(rawToChar(id_info$content))\n    as_tibble(parsed[-1, ], .name_repair = ~ parsed[1, ])\n  }\n\n  result_list &lt;- vector(\"list\", length(years))\n\n  for (i in seq_along(years)) {\n    y &lt;- years[i]\n\n    # build URL and pull data\n    url &lt;- API_URL_Builder(y, numvars, catvars, geo_level, geo_subset)\n    api_response &lt;- httr::GET(url)\n    httr::stop_for_status(api_response)\n\n    df &lt;- create_tibble_helper(api_response)\n    df$year &lt;- y\n\n    # get metadata for year\n    metadata &lt;- get_pums_metadata(y)\n\n    # add labels to user specified categorical variables\n    df &lt;- label_categoricals(df, metadata, catvars)\n\n    result_list[[i]] &lt;- df\n  }\n\n  final &lt;- dplyr::bind_rows(result_list)\n  return(final)\n}\n\nrun\n\n# run it\nout2 &lt;- MultiYear_API_Builder(\n  years   = c(2022),\n  numvars = c(\"AGEP\",\"GASP\",\"GRPIP\",\"JWMNP\"),\n  catvars = c(\"JWAP\", \"JWDP\",\"FER\",\"HHL\",\"HISPEED\",\"JWTRNS\",\"SCH\",\"SCHL\",\"SEX\"),\n  geo_level = \"state\",\n  geo_subset = \"08\"\n)\n#\"JWAP\",\"JWDP\"\n\n#view(out2)\n\n\n#metatest &lt;- get_pums_metadata(2022)\n#head(build_value_lookup(metatest, \"JWAP\"))\n#head(build_value_lookup(metatest, \"JWDP\"))"
  },
  {
    "objectID": "ST558_Project1.html#investigation-using-function",
    "href": "ST558_Project1.html#investigation-using-function",
    "title": "ST 558 Project 1",
    "section": "Investigation using function",
    "text": "Investigation using function"
  },
  {
    "objectID": "ST558_Project1.html#summary",
    "href": "ST558_Project1.html#summary",
    "title": "ST 558 Project 1",
    "section": "Summary",
    "text": "Summary"
  }
]
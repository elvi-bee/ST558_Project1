[
  {
    "objectID": "ST558_Project1.html",
    "href": "ST558_Project1.html",
    "title": "ST 558 Project 1",
    "section": "",
    "text": "Add text"
  },
  {
    "objectID": "ST558_Project1.html#objectives",
    "href": "ST558_Project1.html#objectives",
    "title": "ST 558 Project 1",
    "section": "",
    "text": "Add text"
  },
  {
    "objectID": "ST558_Project1.html#data",
    "href": "ST558_Project1.html#data",
    "title": "ST 558 Project 1",
    "section": "Data",
    "text": "Data\nAdd text"
  },
  {
    "objectID": "ST558_Project1.html#api-call",
    "href": "ST558_Project1.html#api-call",
    "title": "ST 558 Project 1",
    "section": "API Call",
    "text": "API Call\nSteps: - build URL - use httr:GET() to contact website - parse the JSON data using the fromJSON function from the jsonlite package. This reads JSON data from file path or character string and converts and simplifies to R object. - add data to a tibble\n\n# load libraries\nlibrary(jsonlite)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter()  masks stats::filter()\n✖ purrr::flatten() masks jsonlite::flatten()\n✖ dplyr::lag()     masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(dplyr)\nlibrary(ggplot2)\n\n\n#first attempt at API call - I added \"https://\" to the api url\nURL_ids &lt;- \"https://api.census.gov/data/2023/acs/acs5/pums?get=SEX,PWGTP,MAR&for=state:1&SCHL=24\"\nid_info &lt;- httr::GET(URL_ids)\n#str(id_info)\n\n\nparsed &lt;-fromJSON(rawToChar(id_info$content))\nPUMS20235Y &lt;- as_tibble(parsed[-1, ], .name_repair = ~ parsed[1, ])\nPUMS20235Y\n\n# A tibble: 2,248 × 5\n   SEX   PWGTP MAR   SCHL  state\n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 1     16    2     24    01   \n 2 2     6     3     24    01   \n 3 1     6     2     24    01   \n 4 1     12    2     24    01   \n 5 1     14    2     24    01   \n 6 1     14    2     24    01   \n 7 2     16    3     24    01   \n 8 2     37    1     24    01   \n 9 1     11    1     24    01   \n10 2     8     1     24    01   \n# ℹ 2,238 more rows"
  },
  {
    "objectID": "ST558_Project1.html#functions",
    "href": "ST558_Project1.html#functions",
    "title": "ST 558 Project 1",
    "section": "Functions",
    "text": "Functions\n\nHelper function to take what is returned by GET() and turn it into a tibble\n\n  URL_ids &lt;- \"https://api.census.gov/data/2023/acs/acs5/pums?get=SEX,PWGTP,MAR&for=state:1&SCHL=24\"\n  id_info &lt;- httr::GET(URL_ids)\n\ncreate_tibble_helper &lt;- function(id_info) {\n  parsed &lt;-fromJSON(rawToChar(id_info$content))\n  return(as_tibble(parsed[-1, ], .name_repair = ~ parsed[1, ]))\n  \n}\n\ncreate_tibble_helper(id_info)\n\n# A tibble: 2,248 × 5\n   SEX   PWGTP MAR   SCHL  state\n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 2     15    1     24    01   \n 2 1     43    1     24    01   \n 3 1     8     1     24    01   \n 4 1     3     1     24    01   \n 5 1     18    1     24    01   \n 6 1     13    1     24    01   \n 7 2     3     1     24    01   \n 8 1     27    1     24    01   \n 9 1     38    1     24    01   \n10 2     8     1     24    01   \n# ℹ 2,238 more rows\n\n\n\n\nAPI Date (choose year) function\nA function to query the API that allows the user to change the following items: – Year of survey (2022 as default). Only a single value here - Check that a valid value was given (number between 2010 and 2022)\n\n# function that builds API URL with user input for year\n  \nAPI_URL_builder &lt;- function(year = 2022){\n  #code that takes user inputs and concatenates them into a string that becomes the URL, year must be between 2010 - 2022 and cannot be a decimal\n  if ( year &lt; 2010 | year &gt; 2022 | year %% 1 != 0){\n     stop(\"Please enter a valid year between 2010 and 2022.\")\n     return(NA)\n   }\n  \n  API_URL &lt;- paste0(\"https://api.census.gov/data/\", year, \"/acs/acs1/pums?get=SEX,PWGTP,MAR&for=state:1\" )\n  return(API_URL)\n  \n}\n  \nAPI_URL_builder(2015)\n\n[1] \"https://api.census.gov/data/2015/acs/acs1/pums?get=SEX,PWGTP,MAR&for=state:1\"\n\n\n\n\nAPI Numeric Variables functionality\n\nBy default, return (1) AGEP (age) and PWGTP (weight).\nPWGTP must always be returned _ User options: AGEP, GASP, GRPIP, JWAP (time), JWDP (time), and JWMNP\nPWGTP: weight (Persons weight, continuous variable)\n\nAGEP: Age\nGASP: Gas cost (monthly cost, use ADJHSG to adjust GASP to constant dollars)\nGRPIP: Gross rent as a percentage of household income past 12 months (percent)\nJWAP (time): Time of arrival at work - hour and minute (coded 1-285 representing 4 minute increments)\nJWDP (time): Time of departure for work - hour and minute (coded 1-150, representing 9 minute increments)\nJWMP: Travel time to work (minutes, 1-200)\nThe function should turn variables into numeric values or time values (use the middle of the time period) where appropriate. Some variables are coded, e.g. time variables come in as codes as 4 and 9 minute increments. These will require processing at some point\nOne numeric variable other than PWGTP must be returned DOES AGEP COUNT HERE? see note in code below\n\n\n# function that builds API URL with user input for year and numeric variables\n\n\nAPI_Year_NumericVar_Builder &lt;- function(year = 2022,...){\n      if ( year &lt; 2010 | year &gt; 2022 | year %% 1 != 0){\n     stop(\"Please enter a valid year between 2010 and 2022.\")\n     #return(NA)\n   }\n      numvars &lt;- c(...)\n      numvar_options &lt;- c(\"AGEP\",\"GASP\",\"GRPIP\",\"JWAP\",\"JWDP\",\"JWMNP\")\n      \n      #define numvars as \"AGEP\" by default if no numerical variable was entered)\n  if (length(numvars) == 0) numvars &lt;- \"AGEP\"\n      \n      #make sure all user choices are in allowed list of options\n      if (!all(numvars %in% numvar_options)) \n        stop(\"Please enter a valid numeric variable.\")\n  \n      #Note to self: I'm not sure if this is needed because AGEP is default. does AGEP suffice as the required numeric variable?\n      if (length(numvars) &lt; 1) \n        stop(\"Include at least one numeric variable besides PWGTP.\")\n\n      numvars_comb &lt;- paste(numvars, collapse = \",\")\n      \n      \n  #numvars = c(\"AGEP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\")\n  API_URL &lt;- paste0(\"https://api.census.gov/data/\", year, \"/acs/acs1/pums?get=PWGTP,\",numvars_comb,\"&for=state:1\" )\n\n  return(API_URL)\n  \n}\n# I can only get the call below to work when I enter the variables as a combined vector.\nAPI_Year_NumericVar_Builder(2015, \"AGEP\",\"GASP\",\"GRPIP\")\n\n[1] \"https://api.census.gov/data/2015/acs/acs1/pums?get=PWGTP,AGEP,GASP,GRPIP&for=state:1\"\n\n#API_Year_NumericVar_Builder(2016)\n\n\n\nAPI Categorical Variables\nSpecify the categorical variables to be returned (SEX as default). ∗ Options for the user should be FER, HHL, HISPEED, JWTRNS, SCH, SCHL, and SEX - FER: gave birth to child in last 12 months - HHL: household language - HISPEED: Broadband internet service - JWTRNS: Means of transportation to work - SCH: School enrollment - SCHL: Educational attainment - SEX: Sex; 1- Male, 2-Female Your function should turn variables into factors with appropriate levels, where appropriate ∗ One categorical variable must be returned – (Check that the variables asked for are in this set of variables)\n\n# function that builds API URL with user input for numeric variables\n\n\nAPI_Year_NumericVar_Builder &lt;- function(year = 2022, numvars = \"AGEP\", catvars = \"SEX\"){\n      if ( year &lt; 2010 | year &gt; 2022 | year %% 1 != 0){\n     stop(\"Please enter a valid year between 2010 and 2022.\")\n     #return(NA)\n      }\n  \n      # add numeric and categorical variable user options\n      var_options &lt;- c(\"AGEP\",\"GASP\",\"GRPIP\",\"JWAP\",\"JWDP\",\"JWMNP\",\"SEX\", \"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \"SCH\", \"SCHL\")\n      \n      #make sure all user choices are in allowed list of options\n      if (!all(numvars %in% var_options)) \n        stop(\"Please enter a valid numeric variable.\")\n  \n      #Note to self: I'm not sure if this is needed because AGEP is default. does AGEP suffice as the required numeric variable?\n      if (length(numvars) &lt; 1) \n        stop(\"Include at least one numeric variable besides PWGTP.\")\n\n      numvars_comb &lt;- paste(numvars, collapse = \",\")\n      \n      # add categorical variable user options\n      \n      #make sure all user choices are in allowed list of options\n      if (!all(catvars %in% var_options)) \n        stop(\"Please enter a valid categorical variable.\")\n      catvars_comb &lt;- paste(catvars, collapse = \",\")\n      \n  #numvars = c(\"AGEP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\")\n  API_URL &lt;- paste0(\"https://api.census.gov/data/\", year, \"/acs/acs1/pums?get=PWGTP,\",numvars_comb,\",\",catvars_comb,\"&for=state:1\" )\n\n  return(API_URL)\n  \n}\n# I can only get the call below to work when I enter the variables as a combined vector.\n#API_Year_NumericVar_Builder(2015, numvars = c(\"AGEP\",\"GASP\",\"GRPIP\",\"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\"))\n\nAPI_Year_NumericVar_Builder(2015, numvars = c(\"AGEP\",\"GASP\",\"GRPIP\"), catvars = c(\"FER\", \"HHL\"))\n\n[1] \"https://api.census.gov/data/2015/acs/acs1/pums?get=PWGTP,AGEP,GASP,GRPIP,FER,HHL&for=state:1\"\n\n#API_Year_NumericVar_Builder(2016)\n\n\n\nAPI Geography\n(Internal note: this includes all code from chunks above (minus the tibble builder). We can eventually delete the older chunks above, but for now they show my progression in building this function.)\nGeographic functionality for API_URL_Builder function. ∗ User specifies individual regions, division, or states, as well as all regions, divisions, or states. If user selection for region, division, or state subset is left blank, the default selection is all regions, all divisions, or state 08 (Colorado).\n\n# function that builds API URL with user input for numeric, categorical, and geographic variable options\n\n\nAPI_URL_Builder &lt;- function(year = 2022, numvars = \"AGEP\", catvars = \"SEX\", geo_level = \"state\",geo_subset = \"08\"){\n      if ( year &lt; 2010 | year &gt; 2022 | year %% 1 != 0){\n     stop(\"Please enter a valid year between 2010 and 2022.\")\n     #return(NA)\n      }\n  \n      # add numeric and categorical variable user options\n      var_options &lt;- c(\"AGEP\",\"GASP\",\"GRPIP\",\"JWAP\",\"JWDP\",\"JWMNP\",\"SEX\", \"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \"SCH\", \"SCHL\")\n      \n      #make sure all user choices are in allowed list of options\n      if (!all(numvars %in% var_options)) \n        stop(\"Please enter a valid numeric variable.\")\n  \n      #Note to self: I'm not sure if this is needed because AGEP is default. does AGEP suffice as the required numeric variable?\n      if (length(numvars) &lt; 1) \n        stop(\"Include at least one numeric variable besides PWGTP.\")\n\n      numvars_comb &lt;- paste(numvars, collapse = \",\")\n      \n      # add categorical variable user options\n      \n      #make sure all user choices are in allowed list of options\n      if (!all(catvars %in% var_options)) \n        stop(\"Please enter a valid categorical variable.\")\n      catvars_comb &lt;- paste(catvars, collapse = \",\")\n      \n      \n      # add Geographic user options\n      \n      # allowable region, division, and state codes\n      region_code_options &lt;-c(\"1\",\"2\",\"3\",\"4\", \"*\")\n      division_code_options &lt;- c(\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\", \"*\")\n      state_code_options &lt;- c(\"01\",\"49\",\"21\",\"26\",\"29\",\"32\",\"34\",\"08\",\"51\",\"39\",\n                          \"02\",\"46\",\"04\",\"06\",\"55\",\"15\",\"22\",\"30\",\"47\",\"48\",\n                          \"09\",\"50\",\"53\",\"17\",\"20\",\"35\",\"36\",\"10\",\"11\",\"12\",\n                          \"56\",\"16\",\"25\",\"27\",\"42\",\"45\",\"13\",\"23\",\"24\",\"28\",\n                          \"37\",\"41\",\"05\",\"19\",\"31\",\"33\",\"44\",\"54\",\"18\",\"38\",\n                          \"40\", \"*\")\n                          #PR 72 not included\n      \n      #specify the geo_levels, with default of all\n      geo_level_options &lt;- c(\"all\", \"region\", \"division\", \"state\")\n      # Check that the value specified by the user is one of the above values\n      if (!all(geo_level %in% geo_level_options)) \n        stop(\"Please enter a valid Geography.\")\n      \n      # if geo_subset is missing, set defaults\nif (missing(geo_subset) | length(geo_subset) == 0 | geo_subset == \"\") {\n  if (geo_level == \"state\") geo_subset &lt;- \"08\"\n  if (geo_level == \"region\") geo_subset &lt;- \"*\"\n  if (geo_level == \"division\") geo_subset &lt;- \"*\"\n}\n\n      # note to self: consider using && instead of &\n      if (geo_level == \"region\" && !geo_subset %in% region_code_options) {\n  stop(\"Not a valid Region code. Region code must be 1–4\")\n      }\n      if (geo_level == \"division\" && !geo_subset %in% division_code_options) {\n  stop(\"Not a valid Division code. Division code must be 1–9\")\n      }\n      if (geo_level == \"state\" && !geo_subset %in% state_code_options) {\n  stop(\"Not a valid State code\")\n}\n     \n      # build URL\n  API_URL &lt;- paste0(\"https://api.census.gov/data/\", year, \"/acs/acs1/pums?get=PWGTP,\",numvars_comb,\",\",catvars_comb,\"&for=\",geo_level, \":\", geo_subset)\n  \n  return(API_URL)\n  \n  \n}\n\n\n# use function\nAPI_URL_Builder(2015, numvars = c(\"AGEP\",\"GASP\",\"GRPIP\"), catvars = c(\"FER\", \"HHL\"), geo_level = c(\"state\"), geo_subset = c(\"\"))\n\n[1] \"https://api.census.gov/data/2015/acs/acs1/pums?get=PWGTP,AGEP,GASP,GRPIP,FER,HHL&for=state:08\"\n\nAPI_URL_Builder(2015, numvars = c(\"AGEP\",\"GASP\",\"GRPIP\"), catvars = c(\"FER\", \"HHL\"), geo_level = c(\"state\"), geo_subset = c(\"55\"))\n\n[1] \"https://api.census.gov/data/2015/acs/acs1/pums?get=PWGTP,AGEP,GASP,GRPIP,FER,HHL&for=state:55\"\n\n\n\n\nMulti-Year API Builder\nThis function calls the single year function as many times as needed and combines the data into one final tibble (a year variable is included in this final tibble)\n\n# start multi-year function\nMultiYear_API_Builder &lt;- function(years, numvars = \"AGEP\", catvars = \"SEX\", geo_level = \"state\", geo_subset){\n    \n  # add the create tibble helper function\n    create_tibble_helper &lt;- function(id_info) {\n  parsed &lt;-fromJSON(rawToChar(id_info$content))\n  return(as_tibble(parsed[-1, ], .name_repair = ~ parsed[1, ]))\n    } \n \n  # create empty list to temporarily hold years results\n  result_list &lt;- list()\n  \n   # use a for loop for each year in years, run the API_URL_Builder\n  for (i in seq_along(years)) {\n      y &lt;- years[i]\n      \n    # use the loop to run/repeat the API URL Builder function   \n    url &lt;- API_URL_Builder(y, numvars, catvars, geo_level, geo_subset)\n    id_info &lt;- httr::GET(url)\n    df   &lt;- create_tibble_helper(id_info)\n    df$year &lt;- y\n    result_list[[i]] &lt;- df\n    \n    }\n  \n  final &lt;- dplyr::bind_rows(result_list)\n  class(final) &lt;- c(\"census\", class(final)) #make the tibble census-class\n  \n  #____________________________________________________________________________________\n  #wrangle data\n  \n  # numerical data (I tried to do a fancier loop but couldn't make it worK)\n  for (i in seq_along(final)) {\n    if (colnames(final)[i] == \"PWGTP\") {\n    final$PWGTP &lt;- as.integer(final$PWGTP)\n    }\n    if (colnames(final)[i] == \"AGEP\") {\n      final$AGEP &lt;- as.integer(final$AGEP)\n    }\n    if (colnames(final)[i] == \"GASP\") {\n      final$GASP &lt;- as.integer(final$GASP)\n    }\n    if (colnames(final)[i] == \"GRPIP\") {\n      final$GRPIP &lt;- as.integer(final$GRPIP)\n    }\n    if (colnames(final)[i] == \"JWMP\") { #this one is number of minutes\n      final$JWMP &lt;- as.integer(final$JWMP)\n    }\n  }\n  \n  # categorical data: HISPEED, JWTRNS, SCH, SCHL, and SEX \n  for (i in seq_along(final)) {\n    if (colnames(final)[i] == \"FER\") {\n    final$FER &lt;- as.factor(final$FER)\n    }\n    if (colnames(final)[i] == \"HHL\") {\n      final$HHL &lt;- as.factor(final$HHL)\n    }\n    if (colnames(final)[i] == \"HISPEED\") {\n      final$HISPEED &lt;- as.factor(final$HISPEED)\n    }\n    if (colnames(final)[i] == \"JWTRNS\") {\n      final$JWTRNS &lt;- as.factor(final$JWTRNS)\n    }\n    if (colnames(final)[i] == \"SCH\") {\n      final$SCH &lt;- as.factor(final$SCH)\n    }\n    if (colnames(final)[i] == \"SCHL\") {\n      final$SCHL &lt;- as.factor(final$SCHL)\n    }\n    if (colnames(final)[i] == \"SEX\") {\n      final$SEX &lt;- as.integer(final$SEX)\n    }\n  }\n  \n  # time data - I spent a lot of time on this but didn't really get anywhere. The codes that correspond to the times are store as rownames and I couldn't fix it.\n  \n  #Parsing JWAP time data even after talking to dr post this isn't right. I emailed him again.\n#URL_JWAP &lt;- \"https://api.census.gov/data/2022/acs/acs1/pums/variables/JWAP.json\"\n#WAP_key_raw &lt;- httr::GET(URL_JWAP)\n\n#JWAP_key_char &lt;- fromJSON(rawToChar(JWAP_key_raw$content))\n#JWAP_key &lt;- dplyr::as_tibble(JWAP_key_char$values |&gt; unlist()) #from prof\n#JWAP_key\n  \n#  Do WE NEED TO MAKE REGION INTO INTEGER?\n  \n  #____________________________________________________________________________________\n  return(final)\n  \n  }\n\n\n#MultiYear_API_Builder(years = c(2015,2016), numvars = c(\"AGEP\",\"GASP\",\"GRPIP\"), catvars = c(\"FER\", \"HHL\"), geo_level = c(\"region\"), geo_subset = c(\"2\"))\n\nSummary function with means and sds of numvars and counts of catvars\nFor the census summary method, let’s write a function that produces means and standard deviations for our numeric variable(s) and counts for our categorical variable(s). • This function should take three arguments: the tibble with class census, the numeric variable(s) to summarize, the categorical variable(s) to summarize. • By default, it should summarize all numeric variables (other than PWGTP) and all categorical variables in the tibble. However, the user should be able to specify the variables they’d like to summarize if they’d like. – To find a sample mean for a numeric variable, we would do something like this: sum(numeric_vectorweight_vector)/sum(weight_vector) – To find a sample standard deviation: sqrt(sum(numeric_vectorˆ2weight_vector)/sum(weight_vector)-sample_meanˆ2) – Return the values as a named list Test out this function by running summary(your_census_tibble) on something you’ve returned from your census API function. S\n\n#copy and paste filtering from plotting function once it's debugged\n\n#summary.census &lt;- function(API_tibble, \n#                           numvars = c(\"AGEP\",\"GASP\",\"GRPIP\",\"JWAP\",\"JWDP\",\"JWMNP\"),      #catvars = c(\"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \"SCH\", \"SCHL\", \"SEX\")) {\n#  loop through columns in tibble\n#  calculate column summaries based on column type\n#  add to list\n#}\n#output list\n\nPlot function for census class tibble\n\nplot.census &lt;- function(census_tibble, numvar, catvar) {\n  \n  #check tibble \n#  if (class(census_tibble)[1] != \"census\" | is_tibble(census_tibble) != TRUE) {\n#     stop(\"Please enter a valid census-class tibble\")\n#     return(NA)\n#  }\n  \n  #check numvar\n#  numvar_options &lt;- c(\"AGEP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\")\n#  if(numvar %in% numvar_options != TRUE) {\n#    stop(\"Please enter one valid numeric variable\")\n#  }\n  \n  #check catvar\n#  catvar_options &lt;- c(\"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \"SCH\", \"SCHL\", \"SEX\")\n#  if(catvar %in% catvar_options != TRUE) {\n#    stop(\"Please enter one valid categorical variable\")\n#  }\n    \ntibble &lt;- as_tibble(census_tibble) #ggplot doesn't seem to like census class\n\n# filter numvars\nif (numvar == \"AGEP\") filter(tibble, AGEP &gt;= 1 & AGEP &lt;= 99)\n#if (numvar == \"GASP\") filter(tibble, GASP &gt;= 4 & GASP &lt;= 9999)\n#if(numvar == \"GRPIP\") filter(tibble, GRPIP &gt;= 1 & GRPIP &lt;= 100)\n#if(numvar ==\"JWMNP\") filter(tibble, JWMNP &gt;= 1 & JWMNP &lt;= 200)\n# need JWP filter for code = 0\n# need JWDP filter for code = 0\n\n#filter catvars\nif (catvar == \"FER\") filter(tibble, as.integer(FER) %in% c(1,2))\n#if (catvar == \"HHL\") filter(tibble, HHL %in% c(1,2,3,4,5))\n#if (catvar == \"HISPEED\") filter(tibble,HISPEED %in% c(1,2))\n#if (catvar == \"JWTRNS\") filter(tibble,JWTRNS %in% 1:12)\n#if (catvar == \"SCH\") filter(tibble, SCH %in% c(1,2,3))\n#if (catvar == \"SCHL\") filter(tibble, SCHL %in% 1:24)\n#if (catvar == \"SEX\") filter(tibble, SEX %in% c(1,2))\n\n\n\n  ggplot(tibble,\n         aes(x = get(catvar), y = get(numvar), weight = PWGTP)) +\n  geom_boxplot()\n  \n  \n}\n\nTry out plot function for census class tibble\n\n#data_for_plot &lt;- MultiYear_API_Builder(years = c(2015,2016), numvars = c(\"AGEP\",\"GASP\",\"GRPIP\"), catvars = c(\"FER\", \"HHL\"), geo_level = c(\"region\"), geo_subset = c(\"2\"))\n\n#plot.census(data_to_plot, \"AGEP\", \"FER\")"
  },
  {
    "objectID": "ST558_Project1.html#investigation-using-function",
    "href": "ST558_Project1.html#investigation-using-function",
    "title": "ST 558 Project 1",
    "section": "Investigation using function",
    "text": "Investigation using function"
  },
  {
    "objectID": "ST558_Project1.html#summary",
    "href": "ST558_Project1.html#summary",
    "title": "ST 558 Project 1",
    "section": "Summary",
    "text": "Summary"
  }
]
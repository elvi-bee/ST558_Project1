[
  {
    "objectID": "ST558_Project1.html",
    "href": "ST558_Project1.html",
    "title": "ST 558 Project 1",
    "section": "",
    "text": "Add text"
  },
  {
    "objectID": "ST558_Project1.html#objectives",
    "href": "ST558_Project1.html#objectives",
    "title": "ST 558 Project 1",
    "section": "",
    "text": "Add text"
  },
  {
    "objectID": "ST558_Project1.html#data",
    "href": "ST558_Project1.html#data",
    "title": "ST 558 Project 1",
    "section": "Data",
    "text": "Data\nAdd text"
  },
  {
    "objectID": "ST558_Project1.html#api-call",
    "href": "ST558_Project1.html#api-call",
    "title": "ST 558 Project 1",
    "section": "API Call",
    "text": "API Call\nSteps: - build URL - use httr:GET() to contact website - parse the JSON data using the fromJSON function from the jsonlite package. This reads JSON data from file path or character string and converts and simplifies to R object. - add data to a tibble\n\n# load libraries\nlibrary(jsonlite)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter()  masks stats::filter()\n✖ purrr::flatten() masks jsonlite::flatten()\n✖ dplyr::lag()     masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n#first attempt at API call - feel free to change\nURL_ids &lt;- \"api.census.gov/data/2023/acs/acs5/pums?get=SEX,PWGTP,MAR&for=state:1&SCHL=24\"\nid_info &lt;- httr::GET(URL_ids)\n#str(id_info)\n\n\nparsed &lt;-fromJSON(rawToChar(id_info$content))\nPUMS20235Y &lt;- as_tibble(parsed[-1, ], .name_repair = ~ parsed[1, ])\nPUMS20235Y\n\n# A tibble: 2,248 × 5\n   SEX   PWGTP MAR   SCHL  state\n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 1     16    2     24    01   \n 2 2     6     3     24    01   \n 3 1     6     2     24    01   \n 4 1     12    2     24    01   \n 5 1     14    2     24    01   \n 6 1     14    2     24    01   \n 7 2     16    3     24    01   \n 8 2     37    1     24    01   \n 9 1     11    1     24    01   \n10 2     8     1     24    01   \n# ℹ 2,238 more rows"
  },
  {
    "objectID": "ST558_Project1.html#functions",
    "href": "ST558_Project1.html#functions",
    "title": "ST 558 Project 1",
    "section": "Functions",
    "text": "Functions\n\nHelper function to take what is returned by GET() and turn it into a tibble\n\n  URL_ids &lt;- \"api.census.gov/data/2023/acs/acs5/pums?get=SEX,PWGTP,MAR&for=state:1&SCHL=24\"\n  id_info &lt;- httr::GET(URL_ids)\n\ncreate_tibble_helper &lt;- function(id_info) {\n  parsed &lt;-fromJSON(rawToChar(id_info$content))\n  return(as_tibble(parsed[-1, ], .name_repair = ~ parsed[1, ]))\n  \n}\n\ncreate_tibble_helper(id_info)\n\n# A tibble: 2,248 × 5\n   SEX   PWGTP MAR   SCHL  state\n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 1     16    2     24    01   \n 2 2     6     3     24    01   \n 3 1     6     2     24    01   \n 4 1     12    2     24    01   \n 5 1     14    2     24    01   \n 6 1     14    2     24    01   \n 7 2     16    3     24    01   \n 8 2     37    1     24    01   \n 9 1     11    1     24    01   \n10 2     8     1     24    01   \n# ℹ 2,238 more rows\n\n\nContinuing work on the API function Write a function to query the API that allows the user to change the following items: Done – Year of survey (2022 as default). Only a single value here ∗ Check that a valid value was given (number between 2010 and 2022) 3 – Specify the numeric variables to be returned (AGEP and PWGTP as default). PWGTP should always be returned. ∗ Options for the user should be AGEP, GASP, GRPIP, JWAP (time), JWDP (time), and JWMNP ∗ Your function should turn variables into numeric values or time values (use the middle of the time period) where appropriate. ∗ One numeric variable other than PWGTP must be returned\n\n# function that build API URL with user input for year\n  \nAPI_URL_builder &lt;- function(year = 2022){\n  #code that takes user inputs and concatenates them into a string that becomes the URL, year must be between 2010 - 2022 and cannot be a decimal like 2015.5\n  if ( year &lt; 2010 | year &gt; 2022 | year %% 1 != 0){\n     stop(\"not an accepted year\")\n     return(NA)\n   }\n  \n  API_URL &lt;- paste0(\"https://api.census.gov/data/\", year, \"/acs/acs1/pums?get=SEX,PWGTP,MAR&for=state:1\" )\n  return(API_URL)\n  \n}\n  \nAPI_URL_builder(2015)\n\n[1] \"https://api.census.gov/data/2015/acs/acs1/pums?get=SEX,PWGTP,MAR&for=state:1\""
  },
  {
    "objectID": "ST558_Project1.html#investigation-using-function",
    "href": "ST558_Project1.html#investigation-using-function",
    "title": "ST 558 Project 1",
    "section": "Investigation using function",
    "text": "Investigation using function"
  },
  {
    "objectID": "ST558_Project1.html#summary",
    "href": "ST558_Project1.html#summary",
    "title": "ST 558 Project 1",
    "section": "Summary",
    "text": "Summary"
  }
]
---
title: "ST 558 Project 1"
authors: "Group 8: Lanette Tyler and Elvira McIntyre"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

## Objectives

Add text

## Data

Add text

## API Call

Steps: - build URL - use httr:GET() to contact website - parse the JSON data using the fromJSON function from the jsonlite package. This reads JSON data from file path or character string and converts and simplifies to R object. - add data to a tibble

```{r}
# load libraries
library(jsonlite)
library(tidyverse)
library(dplyr)
library(ggplot2)
```

```{r}
#first attempt at API call - I added "https://" to the api url
URL_ids <- "https://api.census.gov/data/2023/acs/acs5/pums?get=SEX,PWGTP,MAR&for=state:1&SCHL=24"
id_info <- httr::GET(URL_ids)
#str(id_info)


parsed <-fromJSON(rawToChar(id_info$content))
PUMS20235Y <- as_tibble(parsed[-1, ], .name_repair = ~ parsed[1, ])
PUMS20235Y
```

## Functions

### Helper function to take what is returned by GET() and turn it into a tibble

```{r}

  URL_ids <- "https://api.census.gov/data/2023/acs/acs5/pums?get=SEX,PWGTP,MAR&for=state:1&SCHL=24"
  id_info <- httr::GET(URL_ids)

create_tibble_helper <- function(id_info) {
  parsed <-fromJSON(rawToChar(id_info$content))
  return(as_tibble(parsed[-1, ], .name_repair = ~ parsed[1, ]))
  
}

create_tibble_helper(id_info)


```

### API Date (choose year) function

A function to query the API that allows the user to change the following items: – Year of survey (2022 as default). *Only a single value here* - Check that a valid value was given (number between 2010 and 2022)

```{r}

# function that builds API URL with user input for year
  
API_URL_builder <- function(year = 2022){
  #code that takes user inputs and concatenates them into a string that becomes the URL, year must be between 2010 - 2022 and cannot be a decimal
  if ( year < 2010 | year > 2022 | year %% 1 != 0){
     stop("Please enter a valid year between 2010 and 2022.")
     return(NA)
   }
  
  API_URL <- paste0("https://api.census.gov/data/", year, "/acs/acs1/pums?get=SEX,PWGTP,MAR&for=state:1" )
  return(API_URL)
  
}
  
API_URL_builder(2015)

  


  
```

### API Numeric Variables functionality

-   By default, return (1) AGEP (age) and PWGTP (weight).
-   *PWGTP must always be returned* \_ User options: AGEP, GASP, GRPIP, JWAP (time), JWDP (time), and JWMNP
-   PWGTP: weight (Persons weight, continuous variable)\
-   AGEP: Age
-   GASP: Gas cost (monthly cost, use ADJHSG to adjust GASP to constant dollars)
-   GRPIP: Gross rent as a percentage of household income past 12 months (percent)
-   JWAP (time): Time of arrival at work - hour and minute (coded 1-285 representing 4 minute increments)
-   JWDP (time): Time of departure for work - hour and minute (coded 1-150, representing 9 minute increments)
-   JWMP: Travel time to work (minutes, 1-200)
-   The function should turn variables into numeric values or time values (use the middle of the time period) where appropriate. ***Some variables are coded, e.g. time variables come in as codes as 4 and 9 minute increments. These will require processing at some point***
-   One numeric variable other than PWGTP must be returned *DOES AGEP COUNT HERE? see note in code below*

```{r}
# function that builds API URL with user input for year and numeric variables


API_Year_NumericVar_Builder <- function(year = 2022,...){
      if ( year < 2010 | year > 2022 | year %% 1 != 0){
     stop("Please enter a valid year between 2010 and 2022.")
     #return(NA)
   }
      numvars <- c(...)
      numvar_options <- c("AGEP","GASP","GRPIP","JWAP","JWDP","JWMNP")
      
      #define numvars as "AGEP" by default if no numerical variable was entered)
  if (length(numvars) == 0) numvars <- "AGEP"
      
      #make sure all user choices are in allowed list of options
      if (!all(numvars %in% numvar_options)) 
        stop("Please enter a valid numeric variable.")
  
      #Note to self: I'm not sure if this is needed because AGEP is default. does AGEP suffice as the required numeric variable?
      if (length(numvars) < 1) 
        stop("Include at least one numeric variable besides PWGTP.")

      numvars_comb <- paste(numvars, collapse = ",")
      
      
  #numvars = c("AGEP", "GASP", "GRPIP", "JWAP", "JWDP", "JWMNP")
  API_URL <- paste0("https://api.census.gov/data/", year, "/acs/acs1/pums?get=PWGTP,",numvars_comb,"&for=state:1" )

  return(API_URL)
  
}
# I can only get the call below to work when I enter the variables as a combined vector.
API_Year_NumericVar_Builder(2015, "AGEP","GASP","GRPIP")
#API_Year_NumericVar_Builder(2016)

```

### API Categorical Variables

Specify the categorical variables to be returned (SEX as default). ∗ Options for the user should be FER, HHL, HISPEED, JWTRNS, SCH, SCHL, and SEX - FER: gave birth to child in last 12 months - HHL: household language - HISPEED: Broadband internet service - JWTRNS: Means of transportation to work - SCH: School enrollment - SCHL: Educational attainment - SEX: Sex; 1- Male, 2-Female ***Your function should turn variables into factors with appropriate levels, where appropriate*** ∗ One categorical variable must be returned – (Check that the variables asked for are in this set of variables)

```{r}

# function that builds API URL with user input for numeric variables


API_Year_NumericVar_Builder <- function(year = 2022, numvars = "AGEP", catvars = "SEX"){
      if ( year < 2010 | year > 2022 | year %% 1 != 0){
     stop("Please enter a valid year between 2010 and 2022.")
     #return(NA)
      }
  
      # add numeric and categorical variable user options
      var_options <- c("AGEP","GASP","GRPIP","JWAP","JWDP","JWMNP","SEX", "FER", "HHL", "HISPEED", "JWTRNS", "SCH", "SCHL")
      
      #make sure all user choices are in allowed list of options
      if (!all(numvars %in% var_options)) 
        stop("Please enter a valid numeric variable.")
  
      #Note to self: I'm not sure if this is needed because AGEP is default. does AGEP suffice as the required numeric variable?
      if (length(numvars) < 1) 
        stop("Include at least one numeric variable besides PWGTP.")

      numvars_comb <- paste(numvars, collapse = ",")
      
      # add categorical variable user options
      
      #make sure all user choices are in allowed list of options
      if (!all(catvars %in% var_options)) 
        stop("Please enter a valid categorical variable.")
      catvars_comb <- paste(catvars, collapse = ",")
      
  #numvars = c("AGEP", "GASP", "GRPIP", "JWAP", "JWDP", "JWMNP")
  API_URL <- paste0("https://api.census.gov/data/", year, "/acs/acs1/pums?get=PWGTP,",numvars_comb,",",catvars_comb,"&for=state:1" )

  return(API_URL)
  
}
# I can only get the call below to work when I enter the variables as a combined vector.
#API_Year_NumericVar_Builder(2015, numvars = c("AGEP","GASP","GRPIP","FER", "HHL", "HISPEED", "JWTRNS"))

API_Year_NumericVar_Builder(2015, numvars = c("AGEP","GASP","GRPIP"), catvars = c("FER", "HHL"))
#API_Year_NumericVar_Builder(2016)

```

### API Geography

(Internal note: this includes all code from chunks above (minus the tibble builder). We can eventually delete the older chunks above, but for now they show my progression in building this function.)

Geographic functionality for API_URL_Builder function. ∗ User specifies individual regions, division, or states, as well as all regions, divisions, or states. If user selection for region, division, or state subset is left blank, the default selection is all regions, all divisions, or state 08 (Colorado).

```{r}
# function that builds API URL with user input for numeric, categorical, and geographic variable options


API_URL_Builder <- function(year = 2022, numvars = "AGEP", catvars = "SEX", geo_level = "state",geo_subset = "08"){
      if ( year < 2010 | year > 2022 | year %% 1 != 0){
     stop("Please enter a valid year between 2010 and 2022.")
     #return(NA)
      }
  
      # add numeric and categorical variable user options
      var_options <- c("AGEP","GASP","GRPIP","JWAP","JWDP","JWMNP","SEX", "FER", "HHL", "HISPEED", "JWTRNS", "SCH", "SCHL")
      
      #make sure all user choices are in allowed list of options
      if (!all(numvars %in% var_options)) 
        stop("Please enter a valid numeric variable.")
  
      #Note to self: I'm not sure if this is needed because AGEP is default. does AGEP suffice as the required numeric variable?
      if (length(numvars) < 1) 
        stop("Include at least one numeric variable besides PWGTP.")

      numvars_comb <- paste(numvars, collapse = ",")
      
      # add categorical variable user options
      
      #make sure all user choices are in allowed list of options
      if (!all(catvars %in% var_options)) 
        stop("Please enter a valid categorical variable.")
      catvars_comb <- paste(catvars, collapse = ",")
      
      
      # add Geographic user options
      
      # allowable region, division, and state codes
      region_code_options <-c("1","2","3","4", "*")
      division_code_options <- c("1","2","3","4","5","6","7","8","9", "*")
      state_code_options <- c("01","49","21","26","29","32","34","08","51","39",
                          "02","46","04","06","55","15","22","30","47","48",
                          "09","50","53","17","20","35","36","10","11","12",
                          "56","16","25","27","42","45","13","23","24","28",
                          "37","41","05","19","31","33","44","54","18","38",
                          "40", "*")
                          #PR 72 not included
      
      #specify the geo_levels, with default of all
      geo_level_options <- c("all", "region", "division", "state")
      # Check that the value specified by the user is one of the above values
      if (!all(geo_level %in% geo_level_options)) 
        stop("Please enter a valid Geography.")
      
      # if geo_subset is missing, set defaults
if (missing(geo_subset) | length(geo_subset) == 0 | geo_subset == "") {
  if (geo_level == "state") geo_subset <- "08"
  if (geo_level == "region") geo_subset <- "*"
  if (geo_level == "division") geo_subset <- "*"
}

      # note to self: consider using && instead of &
      if (geo_level == "region" && !geo_subset %in% region_code_options) {
  stop("Not a valid Region code. Region code must be 1–4")
      }
      if (geo_level == "division" && !geo_subset %in% division_code_options) {
  stop("Not a valid Division code. Division code must be 1–9")
      }
      if (geo_level == "state" && !geo_subset %in% state_code_options) {
  stop("Not a valid State code")
}
     
      # build URL
  API_URL <- paste0("https://api.census.gov/data/", year, "/acs/acs1/pums?get=PWGTP,",numvars_comb,",",catvars_comb,"&for=",geo_level, ":", geo_subset)
  
  return(API_URL)
  
  
}



```

```{r}
# use function
API_URL_Builder(2015, numvars = c("AGEP","GASP","GRPIP"), catvars = c("FER", "HHL"), geo_level = c("state"), geo_subset = c(""))

API_URL_Builder(2015, numvars = c("AGEP","GASP","GRPIP"), catvars = c("FER", "HHL"), geo_level = c("state"), geo_subset = c("55"))

```

### Multi-Year API Builder

This function calls the single year function as many times as needed and combines the data into one final tibble (a year variable is included in this final tibble)

```{r}

# start multi-year function
MultiYear_API_Builder <- function(years, numvars = "AGEP", catvars = "SEX", geo_level = "state", geo_subset){
    
  # add the create tibble helper function
    create_tibble_helper <- function(id_info) {
  parsed <-fromJSON(rawToChar(id_info$content))
  return(as_tibble(parsed[-1, ], .name_repair = ~ parsed[1, ]))
    } 
 
  # create empty list to temporarily hold years results
  result_list <- list()
  
   # use a for loop for each year in years, run the API_URL_Builder
  for (i in seq_along(years)) {
      y <- years[i]
      
    # use the loop to run/repeat the API URL Builder function   
    url <- API_URL_Builder(y, numvars, catvars, geo_level, geo_subset)
    id_info <- httr::GET(url)
    df   <- create_tibble_helper(id_info)
    df$year <- y
    result_list[[i]] <- df
    
    }
  
  final <- dplyr::bind_rows(result_list)
  class(final) <- c("census", class(final))
  
  #____________________________________________________________________________________
  #wrangle data
  
  # numerical data /will also add the one that is only minutes here
  for (i in seq_along(final)) {
    if (colnames(final)[i] == "PWGTP") {
    final$PWGTP <- as.integer(final$PWGTP)
    }
    if (colnames(final)[i] == "AGEP") {
      final$AGEP <- as.integer(final$AGEP)
    }
    if (colnames(final)[i] == "GASP") {
      final$GASP <- as.integer(final$GASP)
    }
    if (colnames(practice_data)[i] == "GRPIP") {
      final$GRPIP <- as.integer(final$GRPIP)
    }
  
}
  
  # time data - I spent a lot of time on this but didn't really get anywhere. The codes that correspond to the times are store as rownames and I couldn't fix it.
  
  #Parsing JWAP time data
URL_JWAP <- "https://api.census.gov/data/2022/acs/acs1/pums/variables/JWAP.json"
JWAP_key_raw <- httr::GET(URL_JWAP)


JWAP_key_char <- fromJSON(rawToChar(JWAP_key_raw$content),flatten = TRUE)
JWAP_key <- as_tibble(JWAP_key_char$values, rownames = "code")
str(JWAP_key)

  
  #____________________________________________________________________________________
  return(final)
  
  }



```

```{r}

MultiYear_API_Builder(years = c(2015,2016), numvars = c("AGEP","GASP","GRPIP"), catvars = c("FER", "HHL"), geo_level = c("region"), geo_subset = c("2"))



 
```

Summary function with means and sds of numvars and counts of catvars
```{r}
summary.census <- function(API_tibble, numvars = c(all), catvars = c(all)) {
  loop through columns in tibble
  calculate column summaries based on column type
  add to list
}
output list
```

Plot function for census class tibble
```{r}
plot.census <- function(census_tibble, numvar, catvar) {
  
  #check tibble 
  if (class(census_tibble)[1] != "census" | is_tibble(census_tibble) != TRUE) {
     stop("Please enter a valid census-class tibble")
     return(NA)
  }
  
  #check numvar
  numvar_options <- c("AGEP", "GASP", "GRPIP", "JWAP", "JWDP", "JWMNP")
  if(numvar %in% numvar_options != TRUE) {
    stop("Please enter one valid numeric variable")
  }
  
  #check catvar
  catvar_options <- c("FER", "HHL", "HISPEED", "JWTRNS", "SCH", "SCHL", "SEX")
  if(catvar %in% catvar_options != TRUE) {
    stop("Please enter one valid categorical variable")
  }
    
  ggplot(census_tibble,
         aes(x = get(catvar), y = get(numvar), weight = PWGTP)) +
  geom_boxplot()
}
```

Try out plot function for census class tibble (need data to be parsed before testing)
```{r}
data_for_plot <- MultiYear_API_Builder(years = c(2015,2016), numvars = c("AGEP","GASP","GRPIP"), catvars = c("FER", "HHL"), geo_level = c("region"), geo_subset = c("2"))

plot.census(data_for_plot, "GRPIP", "HHL")
```



## Investigation using function

```{r}

```

## Summary

---
title: "ST 558 Project 1"
authors: "Group 8: Lanette Tyler and Elvira McIntyre"
format: html
editor: visual
---

## Objectives

Add text

## Data

Add text

## API Call

Steps: - build URL - use httr:GET() to contact website - parse the JSON data using the fromJSON function from the jsonlite package. This reads JSON data from file path or character string and converts and simplifies to R object. - add data to a tibble

```{r}
# load libraries
library(jsonlite)
library(tidyverse)

#first attempt at API call - feel free to change
URL_ids <- "api.census.gov/data/2023/acs/acs5/pums?get=SEX,PWGTP,MAR&for=state:1&SCHL=24"
id_info <- httr::GET(URL_ids)
#str(id_info)


parsed <-fromJSON(rawToChar(id_info$content))
PUMS20235Y <- as_tibble(parsed[-1, ], .name_repair = ~ parsed[1, ])
PUMS20235Y
```

## Functions

### Helper function to take what is returned by GET() and turn it into a tibble

```{r}


  URL_ids <- "api.census.gov/data/2023/acs/acs5/pums?get=SEX,PWGTP,MAR&for=state:1&SCHL=24"
  id_info <- httr::GET(URL_ids)

create_tibble_helper <- function(id_info) {
  parsed <-fromJSON(rawToChar(id_info$content))
  return(as_tibble(parsed[-1, ], .name_repair = ~ parsed[1, ]))
  
}

create_tibble_helper(id_info)


```

### API Date (choose year) function

A function to query the API that allows the user to change the following items: – Year of survey (2022 as default). *Only a single value here* - Check that a valid value was given (number between 2010 and 2022)

```{r}

# function that builds API URL with user input for year
  
API_URL_builder <- function(year = 2022){
  #code that takes user inputs and concatenates them into a string that becomes the URL, year must be between 2010 - 2022 and cannot be a decimal
  if ( year < 2010 | year > 2022 | year %% 1 != 0){
     stop("Please enter a valid year between 2010 and 2022.")
     return(NA)
   }
  
  API_URL <- paste0("https://api.census.gov/data/", year, "/acs/acs1/pums?get=SEX,PWGTP,MAR&for=state:1" )
  return(API_URL)
  
}
  
API_URL_builder(2015)
  


  
```

### API Numeric Variables functionality

-   By default, return (1) AGEP (age) and PWGTP (weight).
-   *PWGTP must always be returned* \_ User options: AGEP, GASP, GRPIP, JWAP (time), JWDP (time), and JWMNP
- PWGTP: weight (Persons weight, continuous variable)  
- AGEP: Age
-   GASP: Gas cost (monthly cost, use ADJHSG to adjust GASP to constant dollars)
-   GRPIP: Gross rent as a percentage of household income past 12 months (percent)
-   JWAP (time): Time of arrival at work - hour and minute (coded 1-285 representing 4 minute increments)
-   JWDP (time): Time of departure for work - hour and minute (coded 1-150, representing 9 minute increments)
-   JWMP: Travel time to work (minutes, 1-200)
-   The function should turn variables into numeric values or time values (use the middle of the time period) where appropriate. ***Some variables are coded, e.g. time variables come in as codes as 4 and 9 minute increments. These will require processing at some point***
-   One numeric variable other than PWGTP must be returned *DOES AGEP COUNT HERE? see note in code below*

```{r}
# function that builds API URL with user input for numeric variables


API_Year_NumericVar_Builder <- function(year = 2022, numvars = "AGEP"){
      if ( year < 2010 | year > 2022 | year %% 1 != 0){
     stop("Please enter a valid year between 2010 and 2022.")
     #return(NA)
   }
      numvar_options <- c("AGEP","GASP","GRPIP","JWAP","JWDP","JWMNP")
      
      #make sure all user choices are in allowed list of options
      if (!all(numvars %in% numvar_options)) 
        stop("Please enter a valid numeric variable.")
  
      #Note to self: I'm not sure if this is needed because AGEP is default. does AGEP suffice as the required numeric variable?
      if (length(numvars) < 1) 
        stop("Include at least one numeric variable besides PWGTP.")

      numvars_comb <- paste(numvars, collapse = ",")
      
      
  #numvars = c("AGEP", "GASP", "GRPIP", "JWAP", "JWDP", "JWMNP")
  API_URL <- paste0("https://api.census.gov/data/", year, "/acs/acs1/pums?get=PWGTP,",numvars_comb,"&for=state:1" )

  return(API_URL)
  
}
# I can only get the call below to work when I enter the variables as a combined vector.
API_Year_NumericVar_Builder(2015, numvars = c("AGEP","GASP","GRPIP"))
#API_Year_NumericVar_Builder(2016)


```

### API Categorical Variables
Specify the categorical variables to be returned (SEX as default).
∗ Options for the user should be FER, HHL, HISPEED, JWTRNS, SCH, SCHL, and SEX
- FER: gave birth to child in last 12 months
- HHL: household language
- HISPEED: Broadband internet service
- JWTRNS: Means of transportation to work
- SCH: School enrollment
- SCHL: Educational attainment
- SEX: Sex; 1- Male, 2-Female
***Your function should turn variables into factors with appropriate levels, where appropriate***
∗ One categorical variable must be returned
– (Check that the variables asked for are in this set of variables)

```{r}

# function that builds API URL with user input for numeric variables


API_Year_NumericVar_Builder <- function(year = 2022, numvars = "AGEP", catvars = "SEX"){
      if ( year < 2010 | year > 2022 | year %% 1 != 0){
     stop("Please enter a valid year between 2010 and 2022.")
     #return(NA)
      }
  
      # add numeric and categorical variable user options
      var_options <- c("AGEP","GASP","GRPIP","JWAP","JWDP","JWMNP","SEX", "FER", "HHL", "HISPEED", "JWTRNS", "SCH", "SCHL")
      
      #make sure all user choices are in allowed list of options
      if (!all(numvars %in% var_options)) 
        stop("Please enter a valid numeric variable.")
  
      #Note to self: I'm not sure if this is needed because AGEP is default. does AGEP suffice as the required numeric variable?
      if (length(numvars) < 1) 
        stop("Include at least one numeric variable besides PWGTP.")

      numvars_comb <- paste(numvars, collapse = ",")
      
      # add categorical variable user options
      
      #make sure all user choices are in allowed list of options
      if (!all(catvars %in% var_options)) 
        stop("Please enter a valid categorical variable.")
      catvars_comb <- paste(catvars, collapse = ",")
      
      
  #numvars = c("AGEP", "GASP", "GRPIP", "JWAP", "JWDP", "JWMNP")
  API_URL <- paste0("https://api.census.gov/data/", year, "/acs/acs1/pums?get=PWGTP,",numvars_comb,",",catvars_comb,"&for=state:1" )

  return(API_URL)
  
}
# I can only get the call below to work when I enter the variables as a combined vector.
#API_Year_NumericVar_Builder(2015, numvars = c("AGEP","GASP","GRPIP","FER", "HHL", "HISPEED", "JWTRNS"))

API_Year_NumericVar_Builder(2015, numvars = c("AGEP","GASP","GRPIP"), catvars = c("FER", "HHL"))
#API_Year_NumericVar_Builder(2016)

```

### API Geography

– Specify the geography level: All, Region, Division, or State (with the default of All)
∗ Check that the value specified by the user is one of the above values
– An optional argument to subset the data (this subsetting should be on the API call itself, not on
what is returned - see the examples in the links above)
∗ User should be able to specify specific Regions, Divisions, or States for this part (and only
those specified geography levels would be returned)
∗ How you allow them to specify this is up to you (you’ll have to parse it appropriately)
Note: 
- So when you go to do a filter on your data download, have the default subset to the state assigned to your group (state ) (the user should be able to change this if they'd like). 
- what I meant by all is the 'default' geography: If they specify something like division they can also specify a geo code (say for division 1 only). If they don't give the geo code then it should just be all of the divisions. 

```{r}
# function that builds API URL with user input for numeric, categorical, and geographic variable options
# Needs a lot more work

API_Year_NumericVar_Builder <- function(year = 2022, numvars = "AGEP", catvars = "SEX", geo_level = "state",geo_subset = "8"){
      if ( year < 2010 | year > 2022 | year %% 1 != 0){
     stop("Please enter a valid year between 2010 and 2022.")
      }
  
      # add numeric and categorical variable user options
      var_options <- c("AGEP","GASP","GRPIP","JWAP","JWDP","JWMNP","SEX", "FER", "HHL", "HISPEED", "JWTRNS", "SCH", "SCHL")
      
      # make sure all user selections are in allowed list of options
      if (!all(numvars %in% var_options)) 
        stop("Please enter a valid numeric variable.")
  
      #Note to self: I'm not sure if this is needed because AGEP is default. does AGEP suffice as the required numeric variable?
      if (length(numvars) < 1) 
        stop("Include at least one numeric variable besides PWGTP.")

      numvars_comb <- paste(numvars, collapse = ",")
      
      # add categorical variable user options
      
      # make sure all user choices are in allowed list of options
      if (!all(catvars %in% var_options)) 
        stop("Please enter a valid categorical variable.")
      catvars_comb <- paste(catvars, collapse = ",")
      
      # add Geographic user options
      #specify the geographic levels, with default of all
      geo_level_options <- c("all", "region", "division", "state")
      # Check that the value specified by the user is one of the above values
      if (!all(geo_level %in% geo_level_options)) 
        stop("Please enter a valid Geography.")
      
 

  API_URL <- paste0("https://api.census.gov/data/", year, "/acs/acs1/pums?get=PWGTP,",numvars_comb,",",catvars_comb,"&for=",geo_level, ":", geo_subset)
  return(API_URL)
  
}
# this works but functionality needs more work
API_Year_NumericVar_Builder(2015, numvars = c("AGEP","GASP","GRPIP"), catvars = c("FER", "HHL"), geo_level = c("state"), geo_subset = c("8"))


```
```{r}
# testing allowable options for geographies

region_codes <- c("1","Northeast","3","South","2","Midwest","4","West")
  
division_codes <- c("7","West South Central (South Region)","2","Middle Atlantic (Northeast region)","4","West North Central (Midwest region)","6","East South Central (South region)","3","East North Central (Midwest region)","9","Pacific (West region)","0","Puerto Rico","5","South Atlantic (South region)","8","Mountain (West region)","1","New England (Northeast region)")

state_codes <- c("01", "Alabama", "AL","49", "Utah", "UT", "21", "Kentucky", "KY","08","Colorado","CO")




```

## Investigation using function

```{r}

```

## Summary

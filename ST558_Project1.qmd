---
title: "ST 558 Project 1"
authors: "Lanette Tyler and Elvira McIntyre"
format: html
editor: visual
---

## Objectives

Add text

## Data

Add text

## API Call

Steps: - build URL - use httr:GET() to contact website - parse the JSON data using the fromJSON function from the jsonlite package. This reads JSON data from file path or character string and converts and simplifies to R object. - add data to a tibble

```{r}
# load libraries
library(jsonlite)
library(tidyverse)

#first attempt at API call - feel free to change
URL_ids <- "api.census.gov/data/2023/acs/acs5/pums?get=SEX,PWGTP,MAR&for=state:1&SCHL=24"
id_info <- httr::GET(URL_ids)
#str(id_info)


parsed <-fromJSON(rawToChar(id_info$content))
PUMS20235Y <- as_tibble(parsed[-1, ], .name_repair = ~ parsed[1, ])
PUMS20235Y
```

## Functions

### Helper function to take what is returned by GET() and turn it into a tibble

```{r}


  URL_ids <- "api.census.gov/data/2023/acs/acs5/pums?get=SEX,PWGTP,MAR&for=state:1&SCHL=24"
  id_info <- httr::GET(URL_ids)

create_tibble_helper <- function(id_info) {
  parsed <-fromJSON(rawToChar(id_info$content))
  return(as_tibble(parsed[-1, ], .name_repair = ~ parsed[1, ]))
  
}

create_tibble_helper(id_info)


```

### API Date (choose year) function

A function to query the API that allows the user to change the following items: â€“ Year of survey (2022 as default). *Only a single value here* - Check that a valid value was given (number between 2010 and 2022)

```{r}

# function that builds API URL with user input for year
  
API_URL_builder <- function(year = 2022){
  #code that takes user inputs and concatenates them into a string that becomes the URL, year must be between 2010 - 2022 and cannot be a decimal
  if ( year < 2010 | year > 2022 | year %% 1 != 0){
     stop("Please enter a valid year between 2010 and 2022.")
     return(NA)
   }
  
  API_URL <- paste0("https://api.census.gov/data/", year, "/acs/acs1/pums?get=SEX,PWGTP,MAR&for=state:1" )
  return(API_URL)
  
}
  
API_URL_builder(2015)
  


  
```

### API Numeric Variables functionality

-   By default, return (1) AGEP (age) and PWGTP (weight).
-   *PWGTP must always be returned* \_ User options: AGEP, GASP, GRPIP, JWAP (time), JWDP (time), and JWMNP
- PWGTP: weight (Persons weight, continuous variable)  
- AGEP: Age
-   GASP: Gas cost (monthly cost, use ADJHSG to adjust GASP to constant dollars)
-   GRPIP: Gross rent as a percentage of household income past 12 months (percent)
-   JWAP (time): Time of arrival at work - hour and minute (coded 1-285 representing 4 minute increments)
-   JWDP (time): Time of departure for work - hour and minute (coded 1-150, representing 9 minute increments)
-   JWMP: Travel time to work (minutes, 1-200)
-   The function should turn variables into numeric values or time values (use the middle of the time period) where appropriate. ***Some variables are coded, e.g. time variables come in as codes as 4 and 9 minute increments. These will require processing at some point***
-   One numeric variable other than PWGTP must be returned *DOES AGEP COUNT HERE? see note in code below*

```{r}
# function that builds API URL with user input for numeric variables


API_Year_NumericVar_Builder <- function(year = 2022, numvars = "AGEP"){
      if ( year < 2010 | year > 2022 | year %% 1 != 0){
     stop("Please enter a valid year between 2010 and 2022.")
     #return(NA)
   }
      numvar_options <- c("AGEP","GASP","GRPIP","JWAP","JWDP","JWMNP")
      
      #make sure all user choices are in allowed list of options
      if (!all(numvars %in% numvar_options)) 
        stop("Please enter a valid numeric variable.")
  
      #Note to self: I'm not sure if this is needed because AGEP is default. does AGEP suffice as the required numeric variable?
      if (length(numvars) < 1) 
        stop("Include at least one numeric variable besides PWGTP.")

      numvars_comb <- paste(numvars, collapse = ",")
      
      
  #numvars = c("AGEP", "GASP", "GRPIP", "JWAP", "JWDP", "JWMNP")
  API_URL <- paste0("https://api.census.gov/data/", year, "/acs/acs1/pums?get=PWGTP,",numvars_comb,"&for=state:1" )

  return(API_URL)
  
}
# I can only get the call below to work when I enter the variables as a combined vector.
API_Year_NumericVar_Builder(2015, numvars = c("AGEP","GASP","GRPIP"))
#API_Year_NumericVar_Builder(2016)


```

## Investigation using function

```{r}

```

## Summary

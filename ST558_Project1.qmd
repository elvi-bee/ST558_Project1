---
title: "ST 558 Project 1"
authors: "Lanette Tyler and Elvira McIntyre"
format: html
editor: visual
---

## Objectives

Add text

## Data

Add text

## API Call

Steps: - build URL - use httr:GET() to contact website - parse the JSON data using the fromJSON function from the jsonlite package. This reads JSON data from file path or character string and converts and simplifies to R object. - add data to a tibble

```{r}
# load libraries
library(jsonlite)
library(tidyverse)

#first attempt at API call - feel free to change
URL_ids <- "api.census.gov/data/2023/acs/acs5/pums?get=SEX,PWGTP,MAR&for=state:1&SCHL=24"
id_info <- httr::GET(URL_ids)
#str(id_info)


parsed <-fromJSON(rawToChar(id_info$content))
PUMS20235Y <- as_tibble(parsed[-1, ], .name_repair = ~ parsed[1, ])
PUMS20235Y
```

## Functions


### Helper function to take what is returned by GET() and turn it into a tibble

```{r}


  URL_ids <- "api.census.gov/data/2023/acs/acs5/pums?get=SEX,PWGTP,MAR&for=state:1&SCHL=24"
  id_info <- httr::GET(URL_ids)

create_tibble_helper <- function(id_info) {
  parsed <-fromJSON(rawToChar(id_info$content))
  return(as_tibble(parsed[-1, ], .name_repair = ~ parsed[1, ]))
  
}

create_tibble_helper(id_info)


```

Continuing work on the API function
Write a function to query the API that allows the user to change the following items:
Done – Year of survey (2022 as default). *Only a single value here*
∗ Check that a valid value was given (number between 2010 and 2022)
3
– Specify the numeric variables to be returned (AGEP and PWGTP as default). PWGTP should
always be returned.
∗ Options for the user should be AGEP, GASP, GRPIP, JWAP (time), JWDP (time), and
JWMNP
∗ Your function should turn variables into numeric values or time values (use the middle of the
time period) where appropriate.
∗ One numeric variable other than PWGTP must be returned

```{r}

# function that build API URL with user input for year
  
API_URL_builder <- function(year = 2022){
  #code that takes user inputs and concatenates them into a string that becomes the URL, year must be between 2010 - 2022 and cannot be a decimal like 2015.5
  if ( year < 2010 | year > 2022 | year %% 1 != 0){
     stop("not an accepted year")
     return(NA)
   }
  
  API_URL <- paste0("https://api.census.gov/data/", year, "/acs/acs1/pums?get=SEX,PWGTP,MAR&for=state:1" )
  return(API_URL)
  
}
  
API_URL_builder(2015)
  


  
```

## Investigation using function

```{r}

```

## Summary
